// linked list

#include <iostream>
using namespace std;
struct node
{
    int data;
    node *next;
};
node *start = NULL;
void ins(int value);
void display();
void dele(int value);
void insbeg(int value);
void delebeg();
void deleend();

int main()
{
    ins(5);
    ins(10);
    ins(15);
    ins(7);
    display();
    dele(7);
    display();
    insbeg(3);
    display();
    delebeg();
    display();
    deleend();
    display();
    return 0;
}
void ins(int value)
{
    node *new_node, *last;
    new_node = new node;
    new_node->data = value;
    if (start == NULL)
    {
        start = new_node;
        new_node->next = NULL;
    }
    else
    {
        last = start;
        while (last->next != NULL)
        {
            last = last->next;
        }
        last->next = new_node;
        new_node->next = NULL;
    }
}
void dele(int value)
{
    node *current, *previous;
    current = start;
    previous = start;
    if (current->data == value)
    {
        start = current->next;
        free(current);
        return;
    }
    else
    {
        while (current->data != value)
        {
            previous = current;
            current = current->next;
        }
        previous->next = current->next;
        free(current);
    }
}
void insbeg(int value)
{
    node *new_node = new node;
    new_node->data = value;
    new_node->next = start;
    start = new_node;
}
void delebeg()
{
    if (start == NULL)
        cout << "is empty";
    else
    {
        node *first_node = new node;
        start = first_node->next;
        delete (first_node);
    }
}
void display()
{
    node *current;
    if (start == NULL)
        cout << "is empty";
    else
    {
        current = start;
        while (current != NULL)
        {
            cout << current->data << endl;
            current = current->next;
        }
    }
}
void deleend()
{
    if (start == NULL)
        cout << "is empty";
    else if (start->next == NULL)
    {
        delete (start);
        start = NULL;
    }
    else
    {
        node *ptr = start;
        while (ptr->next->next != NULL)
        {
            ptr = ptr->next;
        }
        delete (ptr->next);
        ptr->next = NULL;
    }
}
###################################################________________############_----------------3---------__________################################

// stack

#include<iostream>
using namespace std;
#define size 5
int stack[size], top = -1;
void push(int value);
void display();
int peek();
int pop();

int main() {
	push(5);
	push(10);
	push(15);
	display();
	cout << endl;
	pop();
	display();
	cout << endl;
	cout << "peek=" << peek();
	return 0;
}
void push(int value) {
	if (top == size - 1)
		cout << "stack over flow";
	else {
		top++;
		stack[top] = value;
	}
}
int pop() {
	if (top == -1)
		cout << "stack is under flow";
	else {
		return stack[top--];
	}
}
int peek() {
	if (top == -1)
		cout << "stack is under flow";
	else {
		return stack[top];
	}
}
void display() {
	if (top == -1)
		cout << "stack is under flow";
	else {
		for (int i = top; i >= 0; i--)
			cout << stack[i] << endl;
	}
}
###################################################________________############_----------------3---------__________################################

// stack with linked list

#include<iostream>
using namespace std;
#define size 5
int queue[size], front = -1, rear = -1;

void enqueue(int value);
void dequeue();
int peek();
void display();

int main() {
	enqueue(1);
	enqueue(2);
	enqueue(3);
	enqueue(4);
	enqueue(5);
	display();
	cout << endl;
	dequeue();
	display();
	cout << endl;
	cout << "peek=" << peek();
}
void enqueue(int value) {
	if (rear == size - 1)
		cout << "queue is over flow";
	else if (front == -1 && rear == -1) {
		rear++;
		front++;
		queue[rear] = value;
	}
	else
		queue[++rear] = value;
}
void dequeue() {
	if (front != -1 && rear != -1 && front <= rear) {
		front++;
	}
	else {
		cout << "is empty";
	}
}
int peek() {
	if (front != -1 && rear != -1 && front <= rear) {
		return queue[front];
	}
	else {
		cout << "is empty";
		return -1;
	}
}
void display() {
	if (front != -1 && rear != -1 && front <= rear) {
		for (int i = front; i < rear; i++)
			cout << queue[i] << "\t";
	}
	else {
		cout << "is empty";
	}
}
###################################################________________############_----------------3---------__________################################

// circular queue

#include<iostream>
using namespace std;
#define size 5
int queue[size], front = -1, rear = -1;
bool isEmpty();
bool isFull();
void display();
void enqueue(int value);
void dequeue();
int peek();

int main() {
	enqueue(1);
	enqueue(2);
	enqueue(3);
	enqueue(4);
	enqueue(5);
	display();
	cout << endl;
	enqueue(6);
	display();
	cout << endl;
	dequeue();
	display();
	cout << endl;
	enqueue(6);
	display();
	cout << endl;
	cout << "peek=" << peek();
}
bool isEmpty() {
	if (front == -1 && rear == -1)
		return true;
	else
		return false;
}
bool isFull() {
	if (front == 0 && rear == size - 1)
		return true;
	else if (rear == front - 1)
		return true;
	else
		return false;
}
void enqueue(int value) {
	if (isFull())
		cout << "queue is over flow";
	else {
		if (isEmpty()) {
			rear = front = 0;
			queue[rear] = value;
		}
		else
			queue[++rear] = value;
	}
}
void dequeue() {
	if (isEmpty())
		cout << "queue is under flow";
	else {
		if (front == rear)
			front = rear - 1;
		else if (front == size - 1)
			front = 0;
		else
			front++;
	}
}
int peek() {
	if (isEmpty()) {
		cout << "queue is under flow";
		return -1;
	}
	else {
		return queue[front];
	}
}
void display() {
	if (isEmpty())
		cout << "queue is under flow";
	else {
		if (front <= rear) {
			for (int i = front; i < rear; i++)
				cout << queue[i] << "\t";
		}
		else {
			for(int i=front;i<size;i++)
				cout << queue[i] << "\t";
			for(int i=0;i<=rear;i++)
				cout << queue[i] << "\t";
		}
	}
}
###################################################________________############_----------------3---------__________################################

// stack with linked list

#include<iostream>
using namespace std;
struct node {
	int data;
	node* next;
};

node* top = NULL;
void push(int value);
int pop();
int peek();
void display();

int main() {
	push(5);
	push(10);
	push(15);
	display();
	cout << endl;
	pop();
	display();
	cout << endl;
	cout << "peek=" << peek();
	return 0;
}
void push(int value) {
	node* new_node = new node;
	new_node->data = value;
	top = new_node->next;
	top = new_node;
}
int pop() {
	if (top == NULL)
		cout << "stack is empty";
	else {
		int value;
		node* first_node = top;
		value = first_node->data;
		delete(first_node);
		return value;
	}
}
int peek() {
	if (top == NULL) {
		cout << "stack is empty";
	}
	else
		return top->data;
}
void display() {
	node* current;
	if (top == NULL)
		cout << "is empty";
	else {
		current = top;
		while(current!= NULL)
			cout << current->data << endl;
			current = current->next;
		}
	}
}
###################################################________________############_----------------3---------__________################################

// queue with linked list 

#include<iostream>
using namespace std;
struct node {
	int data;
	node* next;
};
node* front = NULL;
node* rear = NULL;
void enqueue(int value);
void dequeue();
void display();
int peek();

int main() {
	enqueue(1);
	enqueue(2);
	enqueue(3);
	enqueue(4);
	enqueue(5);
	display();
	cout << endl;
	dequeue();
	display();
	cout << endl;
	cout << "peek=" << peek();
	return 0;
}
void enqueue(int value) {
	node* new_node = new node;
	new_node->data = value;
	new_node->next = NULL;
	if (front == NULL)
		front = rear = new_node;
	else {
		rear->next = new_node;
		rear = new_node;
	}
}
void dequeue() {
	if (rear == NULL)
		cout << "is empty";
	else if(front == rear){
		node* ptr = front;
		front = rear = NULL;
		delete(ptr);
	}
	else {
		node* ptr = front;
		front = front->next;
		delete(ptr);
	}
}
int peek() {
	if (front == NULL) {
		cout << "is empty";
		return -1;
	}
	else
		return front->data;
}
void display() {
	if (front == NULL)
		cout << "is empty";
	else {
		node* current = front;
		while (current != NULL) {
			cout << current->data;
			current = current->next;
		}
		cout << endl;
	}
}